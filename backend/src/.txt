   ┌────────────┐
   │   Client   │
   └─────┬──────┘
         │
         │ 1. Login (POST /login)
         │   — sends email & password
         ▼
   ┌──────────────┐
   │   Backend    │
   └──────────────┘
         │
         │ ✔ Authenticates credentials
         │ ✔ Generates:
         │    - Access Token (15 min)
         │    - Refresh Token (7 days)
         │ ✔ Stores refreshToken in array/db
         ▼
   ┌────────────┐
   │   Client   │
   └────┬───────┘
        │
        │ 2. Stores:
        │    🍪 accessToken (httpOnly cookie)
        │    🍪 refreshToken (httpOnly cookie)
        │
        ▼

===== Normal API Usage =====
   ┌────────────┐
   │   Client   │
   └────┬───────┘
        │
        │ 3. Makes request to protected route
        │    (GET /profile)
        ▼
   ┌──────────────┐
   │   Backend    │
   └────┬─────────┘
        │
        │ ✔ Reads accessToken from cookie
        │ ✔ Verifies it:
        │    - If valid → allow access
        │    - If expired → return 401
        ▼

===== Access Token Expired =====
   ┌────────────┐
   │   Client   │
   └────┬───────┘
        │
        │ 4. Gets 401 → calls:
        │    (POST /token)
        ▼
   ┌──────────────┐
   │   Backend    │
   └────┬─────────┘
        │
        │ ✔ Reads refreshToken from cookie
        │ ✔ Verifies it:
        │    - If valid → issue new accessToken
        │    - If invalid/expired → 403 (force re-login)
        ▼
   ┌────────────┐
   │   Client   │
   └────┬───────┘
        │
        │ 5. Stores new accessToken cookie
        │ 6. Retries original request

===== Logout Flow =====
   ┌────────────┐
   │   Client   │
   └────┬───────┘
        │
        │ 7. Logout (DELETE /logout)
        ▼
   ┌──────────────┐
   │   Backend    │
   └────┬─────────┘
        │
        │ ✔ Removes refreshToken from array/db
        │ ✔ Clears both cookies
        ▼
   ┌────────────┐
   │   Client   │
   └────────────┘
        ✔ User fully logged out



  // verifying access token
  // prettier-ignore
  jwt.verify(accessToken,process.env.ACCESS_SECRET_TOKEN,async (err, decoded) => {
      if(!err){
        const userId = Number(decoded.userId)
        const dataGrid = await tryFetchLayout(userId);
        res
            .status(200)
            .json(dataGrid);
            console.log("working")
         return ;
      }
       res.status(401).json({ message: "unauthorized" });

    }
  );
  return;








  // extracting the token
  // const refreshToken = req.cookies.refreshToken;
  // const accessToken = req.cookies.accessToken;
  // if (accessToken == null && refreshToken == null) {
  //   res.sendStatus(401);
  //   return;
  // }

  // // verifying access token
  // jwt.verify(
  //   accessToken,
  //   process.env.ACCESS_SECRET_TOKEN,
  //   async (err, decoded) => {
  //     // failed to veify access token
  //     // -> verifying refresh token
  //     if (err) {
  //       return jwt.verify(
  //         refreshToken,
  //         process.env.REFRESH_SECRET_TOKEN,
  //         (err, decoded) => {
  //           // failed to verify refresh token
  //           if (err) {
  //             return res
  //               .status(403)
  //               .json({ error: "Invalid or expired token" });
  //           }
  //           // refreshToken successfully verified
  //           // generate new accessToken);
  //           const accessToken = generateAccessToken(decoded.userId);
  //           return res
  //             .cookie("accessToken", accessToken, {
  //               httpOnly: true,
  //               secure: false,
  //               sameSite: "strict",
  //               maxAge: 5 * 60 * 1000, // 15 min
  //             })
  //             .status(200)
  //             .json({ valid: true });
  //         }
  //       );
  //     }
  //     return res.status(200).json({ valid: true });
  //   }
  // );

  const idStr = typeof userId === "number" ? userId.toString() : `${userId}`;

  return jwt.sign({ userId: idStr }, secretAccessToken, {
    expiresIn: "300s",
  });
};

const generateRefreshToken = (userId: number | string) => {
  const idStr = typeof userId === "number" ? userId.toString() : `${userId}`;

  return jwt.sign({ userId: idStr }, secretRefreshToken, {
    expiresIn: "15d",
  });
};


session token date:
access: 15minutes
expire: 15d
     '




You are a smart assistant that gives brief, precise, and actionable advice based on detailed weather data. Your goal is to interpret the weather holistically and provide a short but clear answer to the user's question.
**Instructions:**
1. Carefully analyze the user question.
2. Use the weather data to give a direct, short answer (1–2 sentences max).
3. Prioritize relevance and real-world practicality (e.g., sunglasses, umbrella, jacket, light clothing).
4. Do not explain the weather unless it justifies your recommendation. If has to, do it shortly
5. Assume the response is for immediate conditions
6. Answer has to be meaningful and specific (do not use vague term e.g., hot)
Answer now with a concise, actionable recommendation.

User question: what should i wear
Weather data:
