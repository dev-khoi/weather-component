/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoggedRouteImport } from './routes/_logged'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoggedRegisterRouteImport } from './routes/_logged/register'
import { Route as LoggedLoginRouteImport } from './routes/_logged/login'
import { Route as AuthWeatherRouteImport } from './routes/_auth/weather'

const LoggedRoute = LoggedRouteImport.update({
  id: '/_logged',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoggedRegisterRoute = LoggedRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => LoggedRoute,
} as any)
const LoggedLoginRoute = LoggedLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => LoggedRoute,
} as any)
const AuthWeatherRoute = AuthWeatherRouteImport.update({
  id: '/weather',
  path: '/weather',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/weather': typeof AuthWeatherRoute
  '/login': typeof LoggedLoginRoute
  '/register': typeof LoggedRegisterRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/weather': typeof AuthWeatherRoute
  '/login': typeof LoggedLoginRoute
  '/register': typeof LoggedRegisterRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_logged': typeof LoggedRouteWithChildren
  '/_auth/weather': typeof AuthWeatherRoute
  '/_logged/login': typeof LoggedLoginRoute
  '/_logged/register': typeof LoggedRegisterRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/weather' | '/login' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/weather' | '/login' | '/register'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_logged'
    | '/_auth/weather'
    | '/_logged/login'
    | '/_logged/register'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoggedRoute: typeof LoggedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_logged': {
      id: '/_logged'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LoggedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_logged/register': {
      id: '/_logged/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof LoggedRegisterRouteImport
      parentRoute: typeof LoggedRoute
    }
    '/_logged/login': {
      id: '/_logged/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoggedLoginRouteImport
      parentRoute: typeof LoggedRoute
    }
    '/_auth/weather': {
      id: '/_auth/weather'
      path: '/weather'
      fullPath: '/weather'
      preLoaderRoute: typeof AuthWeatherRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthWeatherRoute: typeof AuthWeatherRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthWeatherRoute: AuthWeatherRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface LoggedRouteChildren {
  LoggedLoginRoute: typeof LoggedLoginRoute
  LoggedRegisterRoute: typeof LoggedRegisterRoute
}

const LoggedRouteChildren: LoggedRouteChildren = {
  LoggedLoginRoute: LoggedLoginRoute,
  LoggedRegisterRoute: LoggedRegisterRoute,
}

const LoggedRouteWithChildren =
  LoggedRoute._addFileChildren(LoggedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoggedRoute: LoggedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
